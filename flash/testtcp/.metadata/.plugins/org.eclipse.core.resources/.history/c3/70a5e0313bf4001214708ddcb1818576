package
{
	import flash.display.LoaderInfo;
	import flash.display.Sprite;
	import flash.events.UncaughtErrorEvent;
	import flash.events.UncaughtErrorEvents;
	import flash.utils.ByteArray;
	import flash.events.ErrorEvent;
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IOErrorEvent;
	//import flash.events.OutputProgressEvent;
	import flash.events.ProgressEvent;
	import flash.events.SecurityErrorEvent;
	import flash.net.Socket;


	public class testtcp extends Sprite
	{
		private var _socket:Socket=null;
		private var _host:String=null;
		private var _port:uint=0;

		public function testtcp()
		{
			_host = "192.168.202.95";
			_port = 9100;
			open();


			/*loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onUncaughtError);

			var ip:String = "192.168.3.2";
			var iplong:uint = str2inetAddrLong(ip);
			trace("ip long: " + iplong);
			trace("ip string: " + inetAddrLong2ip(iplong));*/
		}

		/**
		 * open tcp connection.
		 * @no param
		 * @no return
		 */
		public function open() : void
		{
			if ( !_socket )
			{
				_socket = new Socket();
			}

			connect(_host, _port);
			trace('[AsynTcpSocket]try to connect ' + _host );
		}

		/**
		 * send data.
		 * @param[in] byteString, data to be sent.
		 * @no return
		 */
		public function send( byteString:ByteArray ) : void
		{
			try{
				_socket.writeBytes(byteString);
				_socket.flush();
			}
			catch(e:*)
			{
				trace("error: " + e.text);
			}
		}

		/**
		 * close tcp connection.
		 * @no param
		 * @no return
		 */
		public function close() : void
		{
			trace('[AsynTcpSocket]close socket.');
			_socket.close();

			_socket.removeEventListener( Event.CONNECT, onConnect );
			_socket.removeEventListener( Event.CLOSE, onClose);
			_socket.removeEventListener( IOErrorEvent.IO_ERROR, onError );
			_socket.removeEventListener( ProgressEvent.SOCKET_DATA, onRecvData );


			//_socket.removeEventListener( OutputProgressEvent.OUTPUT_PROGRESS, onSendData );

			_socket = null;
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		private function connect( addr:String, port:uint ) : void
		{
			try
			{
				_socket.connect(addr, port);
				_socket.addEventListener( Event.CONNECT, onConnect ); //监听连接成功事件
				_socket.addEventListener( Event.CLOSE, onClose);	//监听对方关闭连接事件
				_socket.addEventListener( IOErrorEvent.IO_ERROR, onError ); //监听I/O错误事件
				_socket.addEventListener( SecurityErrorEvent.SECURITY_ERROR, onError ); //监听I/O错误事件
				_socket.addEventListener( ProgressEvent.SOCKET_DATA, onRecvData ); //监听是否有数据到达
				//_socket.addEventListener( OutputProgressEvent.OUTPUT_PROGRESS, onSendData ); //监听数据发送成功事件
			}
			catch(e:ErrorEvent)
			{
				trace("[AsynTcpSocket] _socket.error");
				onClose( e );
			}
		}

		private function onConnect( event:Event ) : void
		{
			trace('[AsynTcpSocket]connected.');
			var ba:ByteArray = new ByteArray();
			var n:uint = 0;
			while(true)
			{
				if(n == 3821)
				{
					trace("3821");
				}
				trace("send data..." + n);
				ba.writeMultiByte("无法解析的外部符号 __imp__closesocket@4，该符号在函数 _wmain 中被引用无法解析的外部符号 __imp__closesocket@4，该符号在函数 _wmain 中被引用无法解析的外部符号 __imp__closesocket@4，该符号在函数 _wmain 中被引用", "iso-8859-1");
				send(ba);
				n++;
			}
		}

		private function onClose( event:Event ) : void
		{
			trace('[AsynTcpSocket]remote host closed the connection.');

			close();
		}

		private function onError( event:Event ) : void
		{
			trace('[AsynTcpSocket]input/output error occurs that causes a send or load operation to fail: ' + ( event as IOErrorEvent ).text);

			close();
		}

		private function onRecvData( event:ProgressEvent ) : void
		{
			trace('[AsynTcpSocket]Socket received ' + _socket.bytesAvailable + ' byte(s) of data:' );

			if (_socket.bytesAvailable <= 0)
			{
				return;
			}

			var ba:ByteArray = new ByteArray();
			_socket.readBytes(ba, 0);
			trace('get socket read data len: ' + ba.length);
		}

		private function onSendData( event:Event ) : void
		{
			trace('[AsynTcpSocket]data is sent: ');
		}


		public function onUncaughtError() : void
		{
			trace("UncaughtErrorEvent");
		}


		public static function str2inetAddrLong(ip:String):uint
		{
			var  num:uint = 0;
			var sections:Array = ip.split(".");
			var len:int=sections.length;
			if(len==4){
				for(var i:int=0;i<len;i++){
					num+=uint(sections[i])<<((len-1-i)*8)
				}
				return num;
			}
			return 0xffffffff;
		}

		public static function inetAddrLong2ip(num:uint):String
		{
			/*var str:String = "";
			var tmp:uint = 0;
			for(var i:int=3;i>=0;i--)
			{
				tmp = (num>>8*i)&0xff;
				str += tmp.toString();
				if(i!=0)
				{
					str += ".";
				}
			}

			return str;*/
			var ipArr:Array=["0","0","0","0"];
			ipArr[0]=(num>>24)&0xFF;
			ipArr[1]=(num>>16)&0xFF;
			ipArr[2]=(num>>8)&0xFF;
			ipArr[3]=num&0xFF;
			return ipArr.join(".");
		}
	}
}